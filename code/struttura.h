// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `struttura.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __struttura_h__
#define __struttura_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace Struttura
{

struct alerts
{
    ::Ice::Float lpeak;
    ::Ice::Float bpeak;
    ::Ice::Float tstartmjd;
    ::Ice::Float tstopmjd;
    ::Ice::Int skyregionid;
    ::std::string skyregionname;
    ::Ice::Int sciencealertid;
    ::std::string sciencealertname;
    ::Ice::Float siindex;
    ::Ice::Int fixflag;
    ::Ice::Float srclocconflevel;
    ::Ice::Float ulconflevel;
    ::Ice::Float gal;
    ::Ice::Float galerror;
    ::Ice::Float iso;
    ::Ice::Float isoerr;
    ::std::string label;
    ::Ice::Float sqrtts;
    ::Ice::Float counts;
    ::Ice::Float countserr;
    ::Ice::Float countsul;
    ::Ice::Float flux;
    ::Ice::Float fluxerr;
    ::Ice::Float fluxUL;
    ::Ice::Float spectralindex;
    ::Ice::Float spectralindexerror;
    ::Ice::Float l;
    ::Ice::Float b;
    ::Ice::Float r;
    ::Ice::Float ella;
    ::Ice::Float ellb;
    ::Ice::Float ellphi;
    ::std::string path;
    ::Ice::Float tstarttt;
    ::Ice::Float tstoptt;
    ::Ice::Int tstarto;
    ::Ice::Int tstopo;
    ::std::string tstartutc;
    ::std::string tstoputc;
    ::Ice::Float exposoure;
    ::Ice::Int id;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Struttura::alerts>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 146;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Struttura::alerts, S>
{
    static void write(S* __os, const ::Struttura::alerts& v)
    {
        __os->write(v.lpeak);
        __os->write(v.bpeak);
        __os->write(v.tstartmjd);
        __os->write(v.tstopmjd);
        __os->write(v.skyregionid);
        __os->write(v.skyregionname);
        __os->write(v.sciencealertid);
        __os->write(v.sciencealertname);
        __os->write(v.siindex);
        __os->write(v.fixflag);
        __os->write(v.srclocconflevel);
        __os->write(v.ulconflevel);
        __os->write(v.gal);
        __os->write(v.galerror);
        __os->write(v.iso);
        __os->write(v.isoerr);
        __os->write(v.label);
        __os->write(v.sqrtts);
        __os->write(v.counts);
        __os->write(v.countserr);
        __os->write(v.countsul);
        __os->write(v.flux);
        __os->write(v.fluxerr);
        __os->write(v.fluxUL);
        __os->write(v.spectralindex);
        __os->write(v.spectralindexerror);
        __os->write(v.l);
        __os->write(v.b);
        __os->write(v.r);
        __os->write(v.ella);
        __os->write(v.ellb);
        __os->write(v.ellphi);
        __os->write(v.path);
        __os->write(v.tstarttt);
        __os->write(v.tstoptt);
        __os->write(v.tstarto);
        __os->write(v.tstopo);
        __os->write(v.tstartutc);
        __os->write(v.tstoputc);
        __os->write(v.exposoure);
        __os->write(v.id);
    }
};

template<class S>
struct StreamReader< ::Struttura::alerts, S>
{
    static void read(S* __is, ::Struttura::alerts& v)
    {
        __is->read(v.lpeak);
        __is->read(v.bpeak);
        __is->read(v.tstartmjd);
        __is->read(v.tstopmjd);
        __is->read(v.skyregionid);
        __is->read(v.skyregionname);
        __is->read(v.sciencealertid);
        __is->read(v.sciencealertname);
        __is->read(v.siindex);
        __is->read(v.fixflag);
        __is->read(v.srclocconflevel);
        __is->read(v.ulconflevel);
        __is->read(v.gal);
        __is->read(v.galerror);
        __is->read(v.iso);
        __is->read(v.isoerr);
        __is->read(v.label);
        __is->read(v.sqrtts);
        __is->read(v.counts);
        __is->read(v.countserr);
        __is->read(v.countsul);
        __is->read(v.flux);
        __is->read(v.fluxerr);
        __is->read(v.fluxUL);
        __is->read(v.spectralindex);
        __is->read(v.spectralindexerror);
        __is->read(v.l);
        __is->read(v.b);
        __is->read(v.r);
        __is->read(v.ella);
        __is->read(v.ellb);
        __is->read(v.ellphi);
        __is->read(v.path);
        __is->read(v.tstarttt);
        __is->read(v.tstoptt);
        __is->read(v.tstarto);
        __is->read(v.tstopo);
        __is->read(v.tstartutc);
        __is->read(v.tstoputc);
        __is->read(v.exposoure);
        __is->read(v.id);
    }
};

}

#endif
